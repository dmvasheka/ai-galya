import { Injectable } from "@nestjs/common";
import { mkdir } from "fs/promises";
import { dirname } from "path";
import puppeteer from "puppeteer";

type Section = { heading: string; content: string };

@Injectable()
export class PdfService {
  async render(opts: {
    id: string;
    title: string;
    summary: string;
    sections: Section[];
    theme: "classic" | "modern";
    outPath: string;
  }) {
    await mkdir(dirname(opts.outPath), { recursive: true });

    const html = this.template(opts);

    const browser = await puppeteer.launch({
      headless: true,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: "networkidle0" });
    await page.pdf({ path: opts.outPath, format: "A4", printBackground: true, margin: { top: "16mm", bottom: "16mm", left: "14mm", right: "14mm" } });
    await browser.close();
  }

  private template({ title, summary, sections, theme }: any) {
    const accent = theme === "classic" ? "#2f3e46" : "#5b21b6";
    const font = theme === "classic" ? "Georgia, serif" : "Inter, system-ui, -apple-system, Segoe UI, Roboto";
    return `<!doctype html>
<html>
<head>
  <meta charset="utf-8" lang="en"/>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    *{box-sizing:border-box}
    body{font-family:${font};line-height:1.5;color:#111827}
    header{border-bottom:2px solid ${accent};padding-bottom:12px;margin-bottom:16px}
    h1{font-size:28px;margin:0;color:${accent}}
    h2{font-size:18px;margin:22px 0 8px;color:${accent}}
    .summary{background:#f9fafb;border:1px solid #e5e7eb;border-radius:10px;padding:12px;margin:12px 0}
    .section{margin:10px 0 14px}
    .footer{margin-top:20px;font-size:12px;color:#6b7280;border-top:1px solid #e5e7eb;padding-top:8px}
  </style>
</head>
<body>
  <header>
    <h1>${this.escape(title)}</h1>
    <div class="summary">${this.escape(summary)}</div>
  </header>
  ${sections
    .map((s: Section) => `
      <section class="section">
        <h2>${this.escape(s.heading)}</h2>
        <div>${this.escape(s.content).replace(/\n/g, '<br/>')}</div>
      </section>
    `)
    .join("\n")}
  <div class="footer">Generated by Numerology Forecast Service</div>
</body>
</html>`;
  }

  private escape(str: string) {
    return (str || "").replace(/[&<>"']/g, c => ({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[c]!));
  }
}
